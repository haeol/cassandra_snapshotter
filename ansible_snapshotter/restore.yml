---
- hosts: "{{ nodes }}"

  vars:
    # extra-vars are nodes, reload
    host_snapshotter_directory: "~/ansible_playbook/snapshotter"

  tasks:

  - name: Delete old snapshotter files (--reload)
    file:
      path: "{{ host_snapshotter_directory }}"
      state: absent
    when: reload

  - name: Copy cassandra snapshotter to nodes (--reload)
    copy:
      src: "{{ playbook_dir }}/snapshotter"
      dest: ~/ansible_playbook
      force: yes
    when: reload # or node_snapshot.stat.exists == False

  - name: check if pyyaml installed
    command: python -c "import yaml"
    register: pyyaml
    ignore_errors: True

  - name: import error
    pip: name=pyyaml version=3.11
    become: true
    when: pyyaml.rc != 0

  - name: Run destroy schema on one machine
    command: "python {{ host_snapshotter_directory }}/destroy.py"
    run_once: true
    delegate_to: "{{ play_hosts[0] }}"
    register: destroy_output
    
  - name: Write destroy.py output to file
    local_action: >
      copy
      content="{{ destroy_output.stdout }}"
      dest="{{ playbook_dir }}/output_logs/destroy-{{ inventory_hostname }}.txt"
      force=yes
    run_once: true
    delegate_to: "{{ play_hosts[0] }}"

  - name: Clean all old files in all machines
    command: "python {{ host_snapshotter_directory }}/cleaner.py"
    register: cleaner_output

  - name: Writing cleaner.py output to file
    local_action: >
      copy
      content="{{ cleaner_output.stdout }}"
      dest="{{ playbook_dir }}/output_logs/cleaner-{{ inventory_hostname }}.txt"
      force=yes

  - name: Clear .snapshots folder in nodes
    file:
      path: "{{ host_snapshotter_directory }}/.snapshots"
      state: absent

  - name: Create .snapshots folder in nodes if did not exist
    file:
      path: "{{ host_snapshotter_directory }}/.snapshots"
      state: directory

  - name: Clear .temp folder in nodes
    file:
      path: "{{ host_snapshotter_directory }}/.temp"
      state: absent

  - name: Create .temp folder in nodes if did not exist
    file:
      path: "{{ host_snapshotter_directory }}/.temp"
      state: directory

  - name: Copy schema file to one machine
    copy:
      src: "{{ playbook_dir }}/.temp/schemas.zip"
      dest: "{{ host_snapshotter_directory }}/.temp"
    run_once: true
    delegate_to: "{{ play_hosts[0] }}"

  - name: Restore schema in one machine
    command: "python {{ host_snapshotter_directory }}/{{ load_schema_command }}"
    run_once: true
    delegate_to: "{{ play_hosts[0] }}"

  - name: Copy snapshot files to respective nodes
    copy:
      src: "{{ playbook_dir }}/.temp/{{ inventory_hostname }}.zip"
      dest: "{{ host_snapshotter_directory }}/.snapshots"

  - name: Load snapshot files in all machines
    command: "python {{ host_snapshotter_directory }}/{{ restore_command }} --nodes {{ play_hosts | join(' ') }}"
    register: restore_output
    ignore_errors: yes

  - name: Writing restore.py output to file
    local_action: >
      copy
      content="{{ restore_output.stdout }}"
      dest="{{ playbook_dir }}/output_logs/restore-{{ inventory_hostname }}.txt"
      force=yes
