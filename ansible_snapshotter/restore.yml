---
- hosts: "{{ nodes }}"

  vars:
    # extra-vars are nodes, reload
    host_snapshotter_directory: "~/ansible_playbook/snapshotter"

  tasks:

  - name: Delete old snapshotter files (--reload)
    file:
      path: "{{ host_snapshotter_directory }}"
      state: absent
    when: reload

  - name: Copy cassandra snapshotter to nodes (--reload)
    copy:
      src: "{{ playbook_dir }}/snapshotter"
      dest: ~/ansible_playbook
      force: yes
    when: reload # or node_snapshot.stat.exists == False

  - name: check if pyyaml installed
    command: python -c "import yaml"
    register: pyyaml
    ignore_errors: True

  - name: import error
    pip: name=pyyaml version=3.11
    become: true
    when: pyyaml.rc != 0

    # TODO hard reset cassandra
    # TODO run destroy schema on one machine
    # destroy all old files in all machines
    # create schema in one machine
    # wait for sync
    # load buckets in all machines

  - name: Run destroy schema on one machine
    command: "python {{ host_snapshotter_directory }}/destroy.py"
    run_once: true
    delegate_to: "{{ play_hosts[0] }}"
    register: destroy_output
    
  - name: Write destroy.py output to file
    local_action: >
      copy
      content="{{ destroy_output.stdout }}"
      dest="{{ playbook_dir }}/output_logs/output_destroy-{{ inventory_hostname }}.txt"
      force=yes
    run_once: true
    delegate_to: "{{ play_hosts[0] }}"

  - name: Clean all old files in all machines
    command: "python {{ host_snapshotter_directory }}/cleaner.py"
    register: cleaner_output

  - name: Writing output to file
    local_action: >
      copy
      content="{{ cleaner_output.stdout }}"
      dest="{{ playbook_dir }}/output_logs/cleaner_output-{{ inventory_hostname }}.txt"
      force=yes

  - name: Clear .snapshots folder in nodes
    file:
      path: "{{ host_snapshotter_directory }}/.temp"
      state: absent

  - name: Create .snapshots folder in nodes if did not exist
    file:
      path: "{{ host_snapshotter_directory }}/.temp"
      state: directory

  - name: Clear .temp folder in nodes
    file:
      path: "{{ host_snapshotter_directory }}/.temp"
      state: absent

  - name: Create .temp folder in nodes if did not exist
    file:
      path: "{{ host_snapshotter_directory }}/.temp"
      state: directory

  - name: Copy schema file to one machine
    copy:
      src: "{{ playbook_dir }}/.temp/schemas.zip"
      dest: "{{ host_snapshotter_directory }}/.temp"
    run_once: true
    delegate_to: "{{ play_hosts[0] }}"

  - pause:

  - name: Restore schema in one machine
    command: "python {{ host_snapshotter_directory }}/{{ load_schema_command }}"
    run_once: true
    delegate_to: "{{ play_hosts[0] }}"

  - name: Copy snapshot files to respective nodes
    copy:
      src: "{{ playbook_dir }}/.temp/{{ inventory_hostname }}.zip"
      dest: "{{ host_snapshotter_directory }}/.snapshots"

  - name: Load snapshot files in all machines
    command: "python {{ host_snapshotter_directory }}/{{ restore_command}} -h {{ play_hosts }}"


#  - name: Restore schema 
#
#  - name: Fetch save_schema from machine
#    fetch:
#      src: "{{ host_snapshotter_directory }}/.snapshots/{{ item }}"
#      dest: "{{ save_snapshot_directory }}"
#      flat: yes
#      fail_on_missing: yes
#    with_items:
#      - "ring_info.txt"
#      - "schemas.zip"
#    run_once: true
#    delegate_to: "{{ play_hosts[0] }}"
#
#
#  - name: Run snapshotter on all nodes
#    command: "python {{ host_snapshotter_directory }}/snapshotter.py"
#    register: output
#    ignore_errors: yes
#
#  - name: Writing output to file
#    local_action: >
#      copy
#      content="{{ output.stdout }}"
#      dest="{{ playbook_dir }}/output_logs/output-{{ inventory_hostname }}.txt"
#      force=yes
#
#  - fail:
#      msg: "Error in running snapshotter, output located in ./output_logs/{{ inventory_hostname }}.txt"
#    when: output.rc != 0
#
#  - name: Retrieve node snapshots
#    fetch:
#      src: "{{ host_snapshotter_directory }}/.snapshots/{{ inventory_hostname }}.zip"
#      dest: "{{ save_snapshot_directory }}"
#      fail_on_missing: yes
#      flat: yes
#
